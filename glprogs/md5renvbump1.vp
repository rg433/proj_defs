!!ARBvp1.0 

# VPROG_MD5R_ENV_BUMP_1_BONE
# 
# input:
# 
# attrib[0]		vertex.position
# attrib[1]		blend (transform) index
# attrib[2]		normal
# attrib[3]		vertex.color (diffuse)
# attrib[6]		tangent
# attrib[7]		binormal
# attrib[8]		2D texture coordinate
#
# program.env[0]-program.env[2]		Blend-space (skin space) to model transform 0
# program.env[3]-program.env[6]		Blend-space (skin space) to model transform 1
# program.env[7]-program.env[9]		Blend-space (skin space) to model transform 2
# program.env[10]-program.env[11]	Blend-space (skin space) to model transform 3
# ...
# program.env[72]-program.env[74]	Blend-space (skin space) to model transform 24
# program.env[75]-program.env[78]	Model-view-projection transform
# program.env[80]					Model local view origin
# program.env[87]-program.env[89]	Model transform
# program.env[91]					Color modulate
# program.env[92]					Color add
# 
# output:
# 
ADDRESS A0;

TEMP	R0, R4, R5, R6, R11;

PARAM	c94 = { 1., 1., 1., 765.005859 };
PARAM	transformPalette[75] = { program.env[0..74] };

#
# load the first matrix
#
MUL R11, vertex.attrib[1].xyzw, c94.w;
ARL A0.x, R11.x;

#
# Transform the vertex position from skin-space to model-space, store model position in R0
#
DP4 R0.x, transformPalette[A0.x], vertex.position;
DP4 R0.y, transformPalette[A0.x+1], vertex.position;
DP4 R0.z, transformPalette[A0.x+2], vertex.position;
MOV R0.w, c94.x;

#
# Transform the normal and tangent from skin-space to model-space
#
DP3 R4.x, transformPalette[A0.x], vertex.normal;							
DP3 R4.y, transformPalette[A0.x+1], vertex.normal;							
DP3 R4.z, transformPalette[A0.x+2], vertex.normal;							
														
DP3 R5.x, transformPalette[A0.x], vertex.attrib[6];
DP3 R5.y, transformPalette[A0.x+1], vertex.attrib[6];
DP3 R5.z, transformPalette[A0.x+2], vertex.attrib[6];
														
DP3 R6.x, transformPalette[A0.x], vertex.attrib[7];
DP3 R6.y, transformPalette[A0.x+1], vertex.attrib[7];
DP3 R6.z, transformPalette[A0.x+2], vertex.attrib[7];

#
# Transform the model vertex position by the model-view-projection transform.
# 
DP4 result.position.x, program.env[75], R0;
DP4 result.position.y, program.env[76], R0;
DP4 result.position.z, program.env[77], R0;
DP4 result.position.w, program.env[78], R0;

# texture 0 takes the unmodified texture coordinates
MOV result.texcoord[0], vertex.attrib[8];

# texture 1 is the vector to the eye in model coordinates
SUB R0, program.env[80], R0;
DP3 result.texcoord[1].x, R0, program.env[87];
DP3 result.texcoord[1].y, R0, program.env[88];
DP3 result.texcoord[1].z, R0, program.env[89];

# texture 2, 3 and 4 gets the transformed tangent, binormal, normal (transposed)
DP3	result.texcoord[2].x, R5, program.env[87];
DP3	result.texcoord[3].x, R5, program.env[88];
DP3	result.texcoord[4].x, R5, program.env[89];

DP3	result.texcoord[2].y, R6, program.env[87];
DP3	result.texcoord[3].y, R6, program.env[88];
DP3	result.texcoord[4].y, R6, program.env[89];

DP3	result.texcoord[2].z, R4, program.env[87];
DP3	result.texcoord[3].z, R4, program.env[88];
DP3	result.texcoord[4].z, R4, program.env[89];

# modulate and add to the vertex color 
MAD result.color, vertex.color, program.env[91], program.env[92];

END

