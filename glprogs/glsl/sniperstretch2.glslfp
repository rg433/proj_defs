uniform sampler2D BackgroundImage;
uniform sampler2D Scope;

varying vec2 	texCoord;
varying vec2	scopeTexCoord;

uniform vec2 textureScale;
uniform vec2 textureHalfScale;
uniform vec4 backgroundColor;

void main(void)
{
   	vec2   start, newTexCoord;
   	vec4   color, scopeArea, blurColor, bendColor;
   	float	blurPart = 0.0;
   
	scopeArea = texture2D( Scope, scopeTexCoord );

   	newTexCoord = texCoord - textureHalfScale;
   	newTexCoord = normalize( newTexCoord );

   	if ( scopeArea.g > 0.0 )
   	{
		vec2 diff = ( ( scopeArea.g - 0.5 ) / textureScale ) ;
		vec2 final = start - ( newTexCoord * diff );
		final = mod( final, textureScale );
      	bendColor = texture2D( BackgroundImage, final );
	}

	start = texCoord;

	if ( scopeArea.r > 0.0 )
	{
		vec4	colors[6];
		float 	len = scopeArea.r;
		vec2	amount = newTexCoord * len * 0.25;
		vec2	pos;
		
		pos = start - amount * 1.5;
		colors[0] = texture2D( BackgroundImage, pos );
		pos = start - amount * 1.4;
		colors[1] = texture2D( BackgroundImage, pos );
		pos = start - amount * 1.3;
		colors[2] = texture2D( BackgroundImage, pos );
		pos = start - amount * 1.2;
		colors[3] = texture2D( BackgroundImage, pos );
		pos = start - amount * 1.1;
		colors[4] = texture2D( BackgroundImage, pos );
		pos = start - amount * 1.0;
		colors[5] = texture2D( BackgroundImage, pos );
		
		blurColor = (colors[0] + colors[1]+ colors[2]+ colors[3]+ colors[4]+ colors[5]) / 6.0;
		
		blurColor += backgroundColor;
		blurColor /= 2.0;
		blurPart = 1.0;
	}

 /*  if ( scopeArea.g > 0.0 )
   	{
   		vec4 c1 = texture2D( BackgroundImage, start );
   		
		vec2 diff = ( ( scopeArea.g - 0.5 ) / textureScale ) ;
		vec2 final = start - ( newTexCoord * diff );
//		final = mod( final, textureScale );
      	vec4 c2 = texture2D( BackgroundImage, final + vec2( 0.1, 0.1 ) );
      
//      	color = (  c1 + c2 ) / 2.0;
		color = c1;
		if ( blurPart > 0.5 )
		{
			color = mix( blurColor, color, scopeArea.g );
		}
		gl_FragColor = color;
	}
	else */
   	if ( scopeArea.r == 0.0 )
	{
		gl_FragColor = texture2D( BackgroundImage, start );
	}
	else
	{
		gl_FragColor = blurColor;
	}
}

